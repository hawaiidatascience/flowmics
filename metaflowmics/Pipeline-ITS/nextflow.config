/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 */

// Pipeline Options
params {
    outdir = "$PWD/" + "ITS-pipeline_outputs"

    paired_end = false
    locus = "ITS1"

    // QC
    keep_phix = true
    max_expected_error = 2

    min_read_count = 200
    pool = "FALSE"

    // OTU clustering
    clustering_thresholds = "100,97"
 
    // Confidence confidence threshold for taxonomic assignment
    tax_confidence = 0.5

    // LULU parameters for merging a parent and a daughter OTU
    skip_lulu = false
 
    lulu_min_ratio_type = "min" // Function to compare the abundance of a parent OTU and its daughter (default: abundance=min(abundances over samples))
    lulu_min_ratio = 1 // Minimum abundance ratio between parent and daughter (across all samples)
    lulu_min_match = 97 // Identity between parent and daughter (max=100)
    lulu_min_rel_cooccurence = 1 // Proportion of the parent samples where daughter occurs (max=1)

    // postprocessing
    alpha_diversity = 'nseqs-sobs-chao-shannon-shannoneven'
    beta_diversity = 'braycurtis-thetayc-sharedsobs-sharedchao'
}

includeConfig "../conf/base.config"

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
