/*
 * -----------------------------------------------
 *  University of Hawaii at Manoa HPCC config file
 * -----------------------------------------------
 *
 */

singularity.enabled = true

params {
	max_cpus   = 39
    max_memory = 900.GB
    max_time   = 7.d
}

executor {
    queueSize = 40
	jobName = {"${task.process.tokenize(':')[-1]}.${task.tag}"}
}

process {
    executor = "slurm"
    queue = "shared,exclusive,kill-shared,kill-exclusive"
    module = "tools/Singularity"

    errorStrategy = "retry"
    maxErrors = "-1"
    maxRetries = 3

    withLabel: process_low {
        cpus = {check_max(6 * task.attempt, "cpus")}
        memory = {check_max(32.GB * task.attempt, "memory")}
        time = {check_max(2.h * task.attempt, "time")}
    }
    withLabel: process_medium {
        cpus = {check_max(10 * task.attempt, "cpus")}
        memory = {check_max(64.GB * task.attempt, "memory")}
        time = {check_max(4.h * task.attempt, "time")}
    }
    withLabel: process_high {
        queue = "shared,shared-long,exclusive,exclusive-long"
        cpus = check_max(19, "cpus")
        memory = {
		  check_max(
	        120.GB*(task.attempt==1 ? 1 : 0) +
            500.GB*(task.attempt==2 ? 1 : 0) +
            1000.GB*(task.attempt==3 ? 1 : 0),
			"memory")
		}
        time = {
		  check_max(
		    6.h*(task.attempt==1 ? 1 : 0) +
            24.h*(task.attempt==2 ? 1 : 0) +
            72.h*(task.attempt==3 ? 1 : 0),
			"time")
		}
    }
    withLabel: "plot" {
        errorStrategy = "ignore"        
    }
    withName: "FAST_TREE|PHYLOSEQ_UNIFRAC|LULU" {
         errorStrategy = "ignore"
    }
}


def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}