params {
	publish_dir_mode = "copy"
	errorStrategy = "terminate"
	maxRetries = 3
	maxErrors  = "-1"
}

executor {
	jobName = {"${task.process.tokenize(':')[-1]}.${task.tag}"}
	queueSize = 40
}

profiles {
    // Environment management
	conda {
		params.enable_conda = true
		conda.useMamba      = true
		conda.cacheDir      = "$HOME/.conda_cache"
		docker.enabled      = false
		singularity.enabled = false
	}
	docker {
		params.enable_conda = false
		singularity.enabled = false
		docker.enabled      = true
		docker.fixOwnership = true
	}
	singularity {
		params.enable_conda = false
		docker.enabled      = false
		singularity.enabled = true
		singularity.cacheDir = "$HOME/.singularity_images.cache"
	}

	// Scheduler
	local { includeConfig "local.config" }
	mana { includeConfig "mana.config" }
	gcp { includeConfig "gcp.config" }
	
	// Testing
	test16S {
		 includeConfig "test.config"
		 params.reads = "$PWD/../tests/16S/*_R{1,2}.fastq.gz"
		 params.silva_release = "seed"
	}
	testITS {
		 includeConfig "test.config"
		 params.reads = "$PWD/../tests/ITS/*_R1.fastq.gz"
	}
	testCOI {
		 includeConfig "test.config"
		 params {
		 	reads = "$PWD/../tests/COI/*_R{1,2}.fastq.gz"
			barcodes = "$PWD/../tests/COI/index.fasta"
			min_subsampling = 100
			demux = "jamp"
		 }
	}
	testDemux {
		 includeConfig "test.config"
		 params {
		 	inputdir = "$PWD/../tests/demux"
			n_per_file = 100
			n_bases = 1e3
		 }
	}
}
